import os, tempfile
import json, hashlib
from flask.ext import excel
from flask import Blueprint, request
from flask import render_template,session,request,Response,abort
from flask_login import current_user, login_required
from e_tokens.utils import login_or_key_required
from e_organisation.models import *

storage_path =  os.path.join(os.curdir,'pitaya/uploads')
reports_views = Blueprint('reports_views', __name__, template_folder='templates')


def get_application_headers():
    headers = list()

    headers.append("organisation name")

    headers.append("updated on")
    headers.append("date created")

    headers.append("current status")
    headers.append("current status updated")

    headers.append("application id")
    headers.append("age")
    headers.append("dob")
    headers.append("yob")
    headers.append("applicant name")
    headers.append("city")
    headers.append("taluk")
    headers.append("state")
    headers.append("district")
    headers.append("address")
    headers.append("country")
    headers.append("pincode")
    headers.append("mobile")
    headers.append("tele code")
    headers.append("tele phone")
    headers.append("father or husband name")

    headers.append("gender")
    headers.append("religion")
    headers.append("category")
    headers.append("education")
    headers.append("disability")
    headers.append("marital status")

    headers.append("male count")
    headers.append("female count")
    headers.append("members above18")
    headers.append("members less than 18")
    headers.append("total earning members")
    headers.append("total number of family members")

    headers.append("nominee age")
    headers.append("nominee name")
    headers.append("nominee phone")
    headers.append("nominee gender")
    headers.append("nominee relationship with borrower")

    headers.append("residence details")
    headers.append("house stay duration")
    headers.append("rent agreement")
    headers.append("monthly rent")

    headers.append("applied loan")
    headers.append("purpose of loan")

    headers.append("bank name")
    headers.append("bank ifsc code")
    headers.append("bank account number")
    headers.append("bank account holder name")
    headers.append("cheque no")
    headers.append("cheque bank name")
    headers.append("repayment mode")
    headers.append("repayment method")

    headers.append("other income")

    headers.append("medical expense")
    headers.append("educational expense")
    headers.append("grocery expense")
    headers.append("conveyance expense")
    headers.append("family other expense")

    headers.append("primary asset for hypothecation purchase year")
    headers.append("primary asset for hypothecation purchase price")
    headers.append("primary asset for hypothecation purchase purpose")
    headers.append("primary asset for hypothecation current market value")
    headers.append("primary asset for hypothecation details of hypothecated goods")

    headers.append("secondary asset for hypothecation purchase year")
    headers.append("secondary asset for hypothecation purchase price")
    headers.append("secondary asset for hypothecation purchase purpose")
    headers.append("secondary asset for hypothecation current market value")
    headers.append("secondary asset for hypothecation details of hypothecated goods")

    headers.append("tertiary asset for hypothecation purchase year")
    headers.append("tertiary asset for hypothecation purchase price")
    headers.append("tertiary asset for hypothecation purchase purpose")
    headers.append("tertiary asset for hypothecation current market value")
    headers.append("tertiary asset for hypothecation details of hypothecated goods")

    headers.append("total liability")
    headers.append("outstanding 1")
    headers.append("outstanding 2")
    headers.append("outstanding 3")
    headers.append("outstanding 4")
    headers.append("total outstanding")

    headers.append("other outstanding emi")
    headers.append("other outstanding chit")
    headers.append("other outstanding insurance")
    headers.append("other outstanding familynfriends")
    headers.append("total other outstanding")

    headers.append("loan eligibility based on net income")
    headers.append("loan eligibility based on company policy")

    headers.append("existing loan cycle")
    headers.append("eligible loan cycle")
    headers.append("defaults with no mfis")
    headers.append("attendence percentage")

    headers.append("total running loans")
    headers.append("total running loans from mfi")
    headers.append("total existing outstanding from")
    headers.append("total existing outstanding from mfi")

    headers.append("equifax submitted")
    headers.append("highmark submitted")
    headers.append("generate disbursement")
    headers.append("generate disbursement done")

    headers.append("expected tenure in months")
    headers.append("expected emi amount served")

    headers.append("total expenditure")
    headers.append("total income")
    headers.append("net income")

    headers.append("applicant aadhaar number")
    headers.append("applicant aadhaar age")
    headers.append("applicant aadhaar dob")
    headers.append("applicant aadhaar name")
    headers.append("applicant aadhaar taluk")
    headers.append("applicant aadhaar state")
    headers.append("applicant aadhaar pincode")
    headers.append("applicant aadhaar address")
    headers.append("applicant aadhaar country")
    headers.append("applicant aadhaar district")
    headers.append("applicant aadhaar phone number")
    headers.append("applicant aadhaar mobile number")
    headers.append("applicant aadhaar father or husband name")

    headers.append("guarantor1 aadhaar number")
    headers.append("guarantor1 aadhaar age")
    headers.append("guarantor1 aadhaar dob")
    headers.append("guarantor1 aadhaar name")
    headers.append("guarantor1 aadhaar taluk")
    headers.append("guarantor1 aadhaar state")
    headers.append("guarantor1 aadhaar pincode")
    headers.append("guarantor1 aadhaar address")
    headers.append("guarantor1 aadhaar country")
    headers.append("guarantor1 aadhaar district")
    headers.append("guarantor1 aadhaar phone number")
    headers.append("guarantor1 aadhaar mobile number")
    headers.append("guarantor1 aadhaar father or husband name")

    headers.append("guarantor2 aadhaar number")
    headers.append("guarantor2 aadhaar age")
    headers.append("guarantor2 aadhaar dob")
    headers.append("guarantor2 aadhaar name")
    headers.append("guarantor2 aadhaar taluk")
    headers.append("guarantor2 aadhaar state")
    headers.append("guarantor2 aadhaar pincode")
    headers.append("guarantor2 aadhaar address")
    headers.append("guarantor2 aadhaar country")
    headers.append("guarantor2 aadhaar district")
    headers.append("guarantor2 aadhaar phone number")
    headers.append("guarantor2 aadhaar mobile number")
    headers.append("guarantor2 aadhaar father or husband name")

    return headers


def get_application_rowdata(app):
    row_data = list()

    row_data.append(app.organisation.name)

    row_data.append(app.updated_on)
    row_data.append(app.date_created)

    row_data.append(app.current_status)
    row_data.append(app.current_status_updated)

    row_data.append(app.application_id)
    row_data.append(app.age)
    row_data.append(app.dob)
    row_data.append(app.yob)
    row_data.append(app.applicant_name)
    row_data.append(app.city)
    row_data.append(app.taluk)
    row_data.append(app.state)
    row_data.append(app.district)
    row_data.append(app.address)
    row_data.append(app.country)
    row_data.append(app.pincode)
    row_data.append(app.mobile)
    row_data.append(app.tele_code)
    row_data.append(app.tele_phone)
    row_data.append(app.father_or_husband_name)

    row_data.append(app.gender)
    row_data.append(app.religion)
    row_data.append(app.category)
    row_data.append(app.education)
    row_data.append(app.disability)
    row_data.append(app.marital_status)

    row_data.append(app.male_count)
    row_data.append(app.female_count)
    row_data.append(app.members_above18)
    row_data.append(app.members_less_than_18)
    row_data.append(app.total_earning_members)
    row_data.append(app.total_number_of_family_members)

    row_data.append(app.nominee_age)
    row_data.append(app.nominee_name)
    row_data.append(app.nominee_phone)
    row_data.append(app.nominee_gender)
    row_data.append(app.nominee_relation)

    row_data.append(app.residence_details)
    row_data.append(app.house_stay_duration)
    row_data.append(app.rent_agreement)
    row_data.append(app.house_monthly_rent)

    row_data.append(app.applied_loan)
    row_data.append(app.purpose_of_loan)

    # row_data.append(app.family_assets_number_of_rented_houses_or_flats)
    # row_data.append(app.family_assets_number_of_rented_shops_or_godowns)

    row_data.append(app.bank_details1.bank_name)
    row_data.append(app.bank_details1.bank_ifsc_code)
    row_data.append(app.bank_details1.bank_account_number)
    row_data.append(app.bank_details1.bank_account_holder_name)
    row_data.append(app.cheque_no)
    row_data.append(app.cheque_bank_name)
    row_data.append(app.repayment_mode)
    row_data.append(app.repayment_method)

    row_data.append(app.other_income)

    row_data.append(app.medical_expenses)
    row_data.append(app.education_expenses)
    row_data.append(app.grocery_expenses)
    row_data.append(app.conveyance_expenses)
    row_data.append(app.family_other_expenses)

    row_data.append(app.primary_asset_for_hypothecation_purchase_year)
    row_data.append(app.primary_asset_for_hypothecation_purchase_price)
    row_data.append(app.primary_asset_for_hypothecation_purchase_purpose)
    row_data.append(app.primary_asset_for_hypothecation_current_market_value)
    row_data.append(app.primary_asset_for_hypothecation_details_of_hypothecated_goods)

    row_data.append(app.secondary_asset_for_hypothecation_purchase_year)
    row_data.append(app.secondary_asset_for_hypothecation_purchase_price)
    row_data.append(app.secondary_asset_for_hypothecation_purchase_purpose)
    row_data.append(app.secondary_asset_for_hypothecation_current_market_value)
    row_data.append(app.secondary_asset_for_hypothecation_details_of_hypothecated_goods)

    row_data.append(app.tertiary_asset_for_hypothecation_purchase_year)
    row_data.append(app.tertiary_asset_for_hypothecation_purchase_price)
    row_data.append(app.tertiary_asset_for_hypothecation_purchase_purpose)
    row_data.append(app.tertiary_asset_for_hypothecation_current_market_value)
    row_data.append(app.tertiary_asset_for_hypothecation_details_of_hypothecated_goods)

    row_data.append(app.total_liability)
    row_data.append(app.outstanding_1)
    row_data.append(app.outstanding_2)
    row_data.append(app.outstanding_3)
    row_data.append(app.outstanding_4)
    row_data.append(app.total_outstanding)

    row_data.append(app.other_outstanding_emi)
    row_data.append(app.other_outstanding_chit)
    row_data.append(app.other_outstanding_insurance)
    row_data.append(app.other_outstanding_familynfriends)
    row_data.append(app.total_other_outstanding())

    row_data.append(app.loan_eligibility_based_on_net_income)
    row_data.append(app.loan_eligibility_based_on_company_policy)

    row_data.append(app.existing_loan_cycle)
    row_data.append(app.eligible_loan_cycle)
    row_data.append(app.defaults_with_no_mfis)
    row_data.append(app.attendence_percentage)

    row_data.append(app.total_running_loans)
    row_data.append(app.total_running_loans_from_mfi)
    row_data.append(app.total_existing_outstanding_from)
    row_data.append(app.total_existing_outstanding_from_mfi)

    row_data.append(app.equifax_submitted)
    row_data.append(app.highmark_submitted)
    row_data.append(app.generate_disbursement)
    row_data.append(app.generate_disbursement_done)

    row_data.append(app.expected_tenure_in_months)
    row_data.append(app.expected_emi_amount_served)

    row_data.append(app.total_expenditure)
    row_data.append(app.total_income)
    row_data.append(app.net_income)

    row_data.append(app.applicant_kyc.kyc_number)
    row_data.append(app.applicant_kyc.age)
    row_data.append(app.applicant_kyc.dob)
    row_data.append(app.applicant_kyc.name)
    row_data.append(app.applicant_kyc.taluk)
    row_data.append(app.applicant_kyc.state)
    row_data.append(app.applicant_kyc.pincode)
    row_data.append(app.applicant_kyc.address)
    row_data.append(app.applicant_kyc.country)
    row_data.append(app.applicant_kyc.district)
    row_data.append(app.applicant_kyc.phone_number)
    row_data.append(app.applicant_kyc.mobile_number)
    row_data.append(app.applicant_kyc.father_or_husband_name)

    row_data.append(app.guarantor1_kyc.kyc_number)
    row_data.append(app.guarantor1_kyc.age)
    row_data.append(app.guarantor1_kyc.dob)
    row_data.append(app.guarantor1_kyc.name)
    row_data.append(app.guarantor1_kyc.taluk)
    row_data.append(app.guarantor1_kyc.state)
    row_data.append(app.guarantor1_kyc.pincode)
    row_data.append(app.guarantor1_kyc.address)
    row_data.append(app.guarantor1_kyc.country)
    row_data.append(app.guarantor1_kyc.district)
    row_data.append(app.guarantor1_kyc.phone_number)
    row_data.append(app.guarantor1_kyc.mobile_number)
    row_data.append(app.guarantor1_kyc.father_or_husband_name)

    row_data.append(app.guarantor2_kyc.kyc_number)
    row_data.append(app.guarantor2_kyc.age)
    row_data.append(app.guarantor2_kyc.dob)
    row_data.append(app.guarantor2_kyc.name)
    row_data.append(app.guarantor2_kyc.taluk)
    row_data.append(app.guarantor2_kyc.state)
    row_data.append(app.guarantor2_kyc.pincode)
    row_data.append(app.guarantor2_kyc.address)
    row_data.append(app.guarantor2_kyc.country)
    row_data.append(app.guarantor2_kyc.district)
    row_data.append(app.guarantor2_kyc.phone_number)
    row_data.append(app.guarantor2_kyc.mobile_number)
    row_data.append(app.guarantor2_kyc.father_or_husband_name)

    return row_data


@reports_views.route('/reports/internal_main/download', methods=["GET"])
@login_or_key_required
def internal_main_reports():
    c_user = current_user
    kwargs = locals()
    from e_organisation.models import EsthenosOrgApplication
    if request.method == 'GET':
        user  = EsthenosUser.objects.get(id=c_user.id)
        applications = EsthenosOrgApplication.objects(organisation=user.organisation)
        application_data = list()

        app_headers = get_application_headers()
        hm_response_headers = list()
        hm_response_headers.append("Application Id")
        hm_response_headers.append("Member Id")
        hm_response_headers.append("Member Name")
        hm_response_headers.append("Spouse Name")
        hm_response_headers.append("Status")
        hm_response_headers.append("Own")
        hm_response_headers.append("Oth All")
        hm_response_headers.append("Oth Active")
        hm_response_headers.append("Pri")
        hm_response_headers.append("Sec")
        hm_response_headers.append("Closed Account")
        hm_response_headers.append("Active Account")
        hm_response_headers.append("Default Account")
        hm_response_headers.append("Own Disb Amt")
        hm_response_headers.append("Other Disb Amt")
        hm_response_headers.append("Own Curr Amt")
        hm_response_headers.append("Other Curr Amt")
        hm_response_headers.append("Own Inst Amt")
        hm_response_headers.append("Other Inst Amt")
        hm_response_headers.append("Value")
        hm_response_headers.append("Remark")
        hm_response_headers.append("Error Descripton")
        hm_response_headers.append("Address")
        hm_response_headers.append("Dob Age")
        hm_response_headers.append("Age As On Dt")
        hm_response_headers.append("Father Name")
        hm_response_headers.append("Ration Card")
        hm_response_headers.append("Voter Id")
        hm_response_headers.append("Phone")
        hm_response_headers.append("Rel Type1")
        hm_response_headers.append("Mbr Rel Name1")
        hm_response_headers.append("Rel Type2")
        hm_response_headers.append("Mbr Rel Name2")
        hm_response_headers.append("Driving Lic")
        hm_response_headers.append("Other Id Type1")
        hm_response_headers.append("Other Id Val1")
        hm_response_headers.append("Branch")
        hm_response_headers.append("Kendra")
        hm_response_headers.append("Report Id")
        headers = app_headers + hm_response_headers
        application_data.append(headers)
        for app in applications:
            app_row_data= get_application_rowdata(app)
            hmresp = EsthenosOrgApplicationHighMarkRequest.objects.get(application_id=app.application_id)
            row_data = list()
            row_data.append(hmresp["application_id"])
            row_data.append(hmresp["member_id"])
            row_data.append(hmresp["member_name"])
            row_data.append(hmresp["spouse_name"])
            row_data.append(hmresp["status"])
            row_data.append(hmresp["own"])
            row_data.append(hmresp["oth_all"])
            row_data.append(hmresp["oth_active"])
            row_data.append(hmresp["pri"])
            row_data.append(hmresp["sec"])
            row_data.append(hmresp["closed_account"])
            row_data.append(hmresp["active_account"])
            row_data.append(hmresp["default_account"])
            row_data.append(hmresp["own_disb_amt"])
            row_data.append(hmresp["other_disb_amt"])
            row_data.append(hmresp["own_curr_amt"])
            row_data.append(hmresp["other_curr_amt"])
            row_data.append(hmresp["own_inst_amt"])
            row_data.append(hmresp["other_inst_amt"])
            row_data.append(hmresp["value"])
            row_data.append(hmresp["remark"])
            row_data.append(hmresp["error_descripton"])
            row_data.append(hmresp["address"])
            row_data.append(hmresp["dob_age"])
            row_data.append(hmresp["age_as_on_dt"])
            row_data.append(hmresp["father_name"])
            row_data.append(hmresp["ration_card"])
            row_data.append(hmresp["voter_id"])
            row_data.append(hmresp["phone"])
            row_data.append(hmresp["rel_type1"])
            row_data.append(hmresp["mbr_rel_name1"])
            row_data.append(hmresp["rel_type2"])
            row_data.append(hmresp["mbr_rel_name2"])
            row_data.append(hmresp["driving_lic"])
            row_data.append(hmresp["other_id_type1"])
            row_data.append(hmresp["other_id_val1"])
            row_data.append(hmresp["branch"])
            row_data.append(hmresp["kendra"])
            row_data.append(hmresp["report_id"])
            app_row_data = app_row_data+row_data
            application_data.append(app_row_data)

        output = excel.make_response_from_array(application_data, 'csv')
        output.headers["Content-Disposition"] = "attachment; filename=internal_main_reports.csv"
        output.headers["Content-type"] = "text/csv"
        return output


@reports_views.route('/reports/external_main/download', methods=["GET"])
@login_or_key_required
def external_main_reports():
    c_user = current_user
    kwargs = locals()
    from e_organisation.models import EsthenosOrgApplication
    if request.method == 'GET':
        user = EsthenosUser.objects.get(id=c_user.id)
        applications = EsthenosOrgApplication.objects(organisation=user.organisation)
        application_data = list()
        headers = get_application_headers()
        application_data.append(headers)
        for app in applications:
            row_data = get_application_rowdata(app)
            application_data.append(row_data)

        output = excel.make_response_from_array(application_data, 'csv')
        output.headers["Content-Disposition"] = "attachment; filename=external_main_reports.csv"
        output.headers["Content-type"] = "text/csv"
        return output


@reports_views.route('/reports/highmark_request/download', methods=["GET"])
@login_or_key_required
def himark_request_reports():
    c_user = current_user
    kwargs = locals()

    if request.method == 'GET':
        user  = EsthenosUser.objects.get(id=c_user.id)

        applications = EsthenosOrgApplication.objects.filter(organisation=user.organisation)

        application_data = list()

        hm_request_headers = list()
        hm_request_headers.append("APPLICANT ID TYPE 1")
        hm_request_headers.append("SEGMENT IDENTIFIER")
        hm_request_headers.append("CREDIT REQUEST TYPE")
        hm_request_headers.append("CREDIT REPORT TRANSACTION ID")
        hm_request_headers.append("CREDIT INQUIRY PURPOSE TYPE")
        hm_request_headers.append("CREDIT INQUIRY PURPOSE TYPE DESCRIPTION")
        hm_request_headers.append("CREDIT INQUIRY STAGE")
        hm_request_headers.append("CREDIT REPORT TRANSACTION DATE TIME")
        hm_request_headers.append("APPLICANT NAME1")
        hm_request_headers.append("APPLICANT NAME2")
        hm_request_headers.append("APPLICANT NAME3")
        hm_request_headers.append("APPLICANT NAME4")
        hm_request_headers.append("APPLICANT NAME5")
        hm_request_headers.append("MEMBER FATHER NAME")
        hm_request_headers.append("MEMBER MOTHER NAME")
        hm_request_headers.append("MEMBER SPOUSE NAME")
        hm_request_headers.append("MEMBER RELATIONSHIP TYPE 1")
        hm_request_headers.append("MEMBER RELATIONSHIP NAME 1")
        hm_request_headers.append("MEMBER RELATIONSHIP TYPE 2")
        hm_request_headers.append("MEMBER RELATIONSHIP NAME 2")
        hm_request_headers.append("MEMBER RELATIONSHIP TYPE 3")
        hm_request_headers.append("MEMBER RELATIONSHIP NAME 3")
        hm_request_headers.append("MEMBER RELATIONSHIP TYPE 4")
        hm_request_headers.append("MEMBER RELATIONSHIP NAME 4")
        hm_request_headers.append("APPLICANT BIRTH DATE")
        hm_request_headers.append("APPLICANT AGE")
        hm_request_headers.append("APPLICANT AGE AS ON DATE")
        hm_request_headers.append("APPLICANT ID  1")
        hm_request_headers.append("APPLICANT ID TYPE 2")
        hm_request_headers.append("APPLICANT ID 2")
        hm_request_headers.append("ACCT OPEN DATE")
        hm_request_headers.append("APPLICATION-ID/ ACCOUNT-NO")
        hm_request_headers.append("BRANCH ID")
        hm_request_headers.append("MEMBER ID")
        hm_request_headers.append("KENDRA ID")
        hm_request_headers.append("APPLIED FOR AMOUNT/ CURRENT BALANCE")
        hm_request_headers.append("KEY PERSON NAME")
        hm_request_headers.append("KEY PERSON  RELATION")
        hm_request_headers.append("NOMINEE NAME")
        hm_request_headers.append("NOMINEE RELATIONSHIP TYPE")
        hm_request_headers.append("APPLICANT TELEPHONE NUMBER TYPE 1")
        hm_request_headers.append("APPLICANT TELEPHONE NUMBER 1")
        hm_request_headers.append("APPLICANT TELEPHONE NUMBER TYPE 2")
        hm_request_headers.append("APPLICANT TELEPHONE NUMBER 2")
        hm_request_headers.append("APPLICANT ADDRESS TYPE 1")
        hm_request_headers.append("APPLICANT ADDRESS 1")
        hm_request_headers.append("APPLICANT ADDRESS 1 CITY")
        hm_request_headers.append("APPLICANT ADDRESS 1 STATE")
        hm_request_headers.append("APPLICANT ADDRESS 1 PIN CODE")
        hm_request_headers.append("APPLICANT ADDRESS TYPE 2")
        hm_request_headers.append("APPLICANT ADDRESS 2")
        hm_request_headers.append("APPLICANT ADDRESS 2 CITY")
        hm_request_headers.append("APPLICANT ADDRESS 2 STATE")
        hm_request_headers.append("APPLICANT ADDRESS 2 PIN CODE")
        headers =  hm_request_headers
        application_data.append(headers)
        for app in applications:
            hm_request = EsthenosOrgApplicationHighMarkResponse.objects.get(application_id=app.application_id)
            row_data = list()
            row_data.append(hm_request["application_id"])
            row_data.append(hm_request["segment_identifier"])
            row_data.append(hm_request["credit_request_type"])
            row_data.append(hm_request["credit_report_transaction_id"])
            row_data.append(hm_request["credit_inquiry_purpose_type"])
            row_data.append(hm_request["credit_inquiry_purpose_type_description"])
            row_data.append(hm_request["credit_inquiry_stage"])
            row_data.append(hm_request["credit_report_transaction_date_time"])
            row_data.append(hm_request["applicant_name1"])
            row_data.append(hm_request["applicant_name2"])
            row_data.append(hm_request["applicant_name3"])
            row_data.append(hm_request["applicant_name4"])
            row_data.append(hm_request["applicant_name5"])
            row_data.append(hm_request["member_father_name"])
            row_data.append(hm_request["member_mother_name"])
            row_data.append(hm_request["member_spouse_name"])
            row_data.append(hm_request["member_relationship_type1"])
            row_data.append(hm_request["member_relationship_name1"])
            row_data.append(hm_request["member_relationship_type2"])
            row_data.append(hm_request["member_relationship_name2"])
            row_data.append(hm_request["member_relationship_type3"])
            row_data.append(hm_request["member_relationship_name3"])
            row_data.append(hm_request["member_relationship_type4"])
            row_data.append(hm_request["member_relationship_name4"])
            row_data.append(hm_request["applicant_birth_date"])
            row_data.append(hm_request["applicant_age"])
            row_data.append(hm_request["applicant_age_as_on_date"])
            row_data.append(hm_request["applicant_id_type1"])
            row_data.append(hm_request["applicant_id1"])
            row_data.append(hm_request["applicant_id_type2"])
            row_data.append(hm_request["applicant_id2"])
            row_data.append(hm_request["acct_open_date"])
            row_data.append(hm_request["applicant_id__account_no"])
            row_data.append(hm_request["branch_id"])
            row_data.append(hm_request["member_id"])
            row_data.append(hm_request["kendra_id"])
            row_data.append(hm_request["applied_for_amount__current_balance"])
            row_data.append(hm_request["key_person_name"])
            row_data.append(hm_request["key_person_relation"])
            row_data.append(hm_request["nominee_name"])
            row_data.append(hm_request["applicant_telephone_number_type1"])
            row_data.append(hm_request["applicant_telephone_number1"])
            row_data.append(hm_request["applicant_telephone_number_type2"])
            row_data.append(hm_request["applicant_telephone_number2"])
            row_data.append(hm_request["applicant_address_type1"])
            row_data.append(hm_request["applicant_address1"])
            row_data.append(hm_request["applicant_address1_city"])
            row_data.append(hm_request["applicant_address1_state"])
            row_data.append(hm_request["applicant_address1_pincode"])
            row_data.append(hm_request["applicant_address_type2"])
            row_data.append(hm_request["applicant_address2"])
            row_data.append(hm_request["applicant_address2_city"])
            row_data.append(hm_request["applicant_address2_state"])
            row_data.append(hm_request["applicant_address2_pincode"])
            row_data.append(hm_request["nominee_relationship_type"])

            app_row_data = row_data
            application_data.append(app_row_data)

        output = excel.make_response_from_array(application_data, 'csv')
        output.headers["Content-Disposition"] = "attachment; filename=himark_request_reports.csv"
        output.headers["Content-type"] = "text/csv"
        return output


@reports_views.route('/reports/eqifax_request/download', methods=["GET"])
@login_or_key_required
def eqifax_request_reports():
    c_user = current_user
    kwargs = locals()
    from e_organisation.models import EsthenosOrgApplicationEqifax
    if request.method == 'GET':
        user  = EsthenosUser.objects.get(id=c_user.id)

        applications = EsthenosOrgApplication.objects.filter(organisation=user.organisation)

        application_data = list()

        eq_request_headers = list()
        eq_request_headers.append("Reference Number")
        eq_request_headers.append("Member ID/ Unique Account Number")
        eq_request_headers.append("Inquiry Purpose (Required)")
        eq_request_headers.append("Transaction Amount")
        eq_request_headers.append("ConsumerName (Required)")
        eq_request_headers.append("Additional Type1 (Relationship)")
        eq_request_headers.append("Additional Name1")
        eq_request_headers.append("Additional Type2")
        eq_request_headers.append("Additional Name2")
        eq_request_headers.append("Address & City (Required)")
        eq_request_headers.append("State/Union Territory (Required)")
        eq_request_headers.append("Postal Pin (Required)")
        eq_request_headers.append("Ration Card")
        eq_request_headers.append("Voter ID")
        eq_request_headers.append("Additional Id 1")
        eq_request_headers.append("Additional Id 2")
        eq_request_headers.append("National ID Card (UIN)")
        eq_request_headers.append("Tax ID / PAN ")
        eq_request_headers.append("Phone (Home)")
        eq_request_headers.append("Phone (Mobile)")
        eq_request_headers.append("DOB(Required)")
        eq_request_headers.append("Gender")
        eq_request_headers.append("Branch ID")
        eq_request_headers.append("Kendra ID")

        headers =  eq_request_headers
        application_data.append(headers)
        for app in applications:
            print app.application_id
            eq_request = EsthenosOrgApplicationEqifax.objects.filter(kendra_id=app.application_id)[0]
            row_data = list()
            row_data.append(eq_request["reference_number"])
            row_data.append(eq_request["member_id_unique_accountnumber"])
            row_data.append(eq_request["inquiry_purpose"])
            row_data.append(eq_request["transaction_amount"])
            row_data.append(eq_request["consumer_name"])
            row_data.append(eq_request["additional_type1"])
            row_data.append(eq_request["additional_name1"])
            row_data.append(eq_request["additional_type2"])
            row_data.append(eq_request["additional_name2"])
            row_data.append(eq_request["address_city"])
            row_data.append(eq_request["state_union_territory"])
            row_data.append(eq_request["postal_pin"])
            row_data.append(eq_request["ration_card"])
            row_data.append(eq_request["voter_id"])
            row_data.append(eq_request["additional_id1"])
            row_data.append(eq_request["additional_id2"])
            row_data.append(eq_request["national_id_card"])
            row_data.append(eq_request["tax_id_pan"])
            row_data.append(eq_request["phone_home"])
            row_data.append(eq_request["phone_mobile"])
            row_data.append(eq_request["dob"])
            row_data.append(eq_request["gender"])
            row_data.append(eq_request["branch_id"])
            row_data.append(eq_request["kendra_id"])

            app_row_data = row_data
            application_data.append(app_row_data)

        output = excel.make_response_from_array(application_data, 'csv')
        output.headers["Content-Disposition"] = "attachment; filename=eqifax_request_reports.csv"
        output.headers["Content-type"] = "text/csv"
        return output
